<style>
    @import url('https://fonts.googleapis.com/css2?family=Arvo:wght@400;700&family=Josefin+Sans:wght@100;300;400;500;600;700&family=Work+Sans:wght@400;500;600;700;800&display=swap');
    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Work Sans', sans-serif;
}

body {
    height: 100vh;
    width: 100vw;
    background-color: whitesmoke;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.container {
    width: 31em;
    height: 100%;
    background-color: #f5f5f5;
    display: flex;
    justify-content: center;
    align-items: center;
    /* position: ; */
    /* transform: translate(-50%, -50%); */

    /* border-radius: 10px; */
}
.heading{
    margin-top: 100px;
}

.base {
    background-color: #ffffff;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    box-shadow: 0 1.2em 2.5em rgba(16, 2, 96, 0.15);
}

.base h3 {
    font-weight: 600;
    color: green;
    font-size: 30px;
}

#scratch {
    border: 2px solid black;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
}

.base,
#scratch {
    height: 200px;
    width: 200px;
    position: absolute;
    transform: translate(-50%, -50%);
    top: 50%;
    left: 50%;
    text-align: center;
    cursor: grabbing;
    border-radius: 0.3em;
}


 .box .view{
    cursor: pointer;
    margin-top: 10px;
    width: 100%;
    outline: none;
    border: none;
    padding:10px 15px;
    background-color: white;
    color: green;
    border-radius: 7px;
    font-weight: 700;
}

.box .view:active{
    color: white;
    background-color: green;
}
.box .full{
    background-color: white;
}
.box .full{
    cursor: pointer;
    width: 100%;
    outline: none;
    border: none;
    padding:10px 15px;
    background-color: green;
    color: white;
    border-radius: 7px;
    font-weight: 700;
}
</style>


<body>
    <div class="heading">
        <h3>Scratch to see your Prime member benifits</h3>
    </div>
    <div class="container">
        <div class="base">
            <h4>You got</h4>
            <h3>{{scratch__card}} wallet money</h3>
        </div>
        <canvas id="scratch" width="200" height="200"></canvas>
    </div>
        <div class="box" style="margin-bottom: 50px;">
        <button onclick="window.location.href='/users'" class="full">Go back to Home</button>
        <button onclick="window.location.href='/users/showOrders'" class="view">View Orders</button>
    </div>
</body>

    <script>
       let canvas = document.getElementById("scratch");
let context = canvas.getContext("2d");

const init = () => {
  let gradientColor = context.createLinearGradient(0, 0, 255, 255);
  gradientColor.addColorStop(0, "#98DE5B");
  gradientColor.addColorStop(1, "#08E1AE");
  context.fillStyle = gradientColor;
  context.fillRect(0, 0, 200, 200);
};

//initially mouse X and mouse Y positions are 0
let mouseX = 0;
let mouseY = 0;
let isDragged = false;

//Events for touch and mouse
let events = {
  mouse: {
    down: "mousedown",
    move: "mousemove",
    up: "mouseup",
  },
  touch: {
    down: "touchstart",
    move: "touchmove",
    up: "touchend",
  },
};

let deviceType = "";

//Detech touch device
const isTouchDevice = () => {
  try {
    //We try to create TouchEvent. It would fail for desktops and throw error.
    document.createEvent("TouchEvent");
    deviceType = "touch";
    return true;
  } catch (e) {
    deviceType = "mouse";
    return false;
  }
};

//Get left and top of canvas
let rectLeft = canvas.getBoundingClientRect().left;
let rectTop = canvas.getBoundingClientRect().top;

//Exact x and y position of mouse/touch
const getXY = (e) => {
  mouseX = (!isTouchDevice() ? e.pageX : e.touches[0].pageX) - rectLeft;
  mouseY = (!isTouchDevice() ? e.pageY : e.touches[0].pageY) - rectTop;
};

isTouchDevice();
//Start Scratch
canvas.addEventListener(events[deviceType].down, (event) => {
  isDragged = true;
  //Get x and y position
  getXY(event);
  scratch(mouseX, mouseY);
});

//mousemove/touchmove
canvas.addEventListener(events[deviceType].move, (event) => {
  if (!isTouchDevice()) {
    event.preventDefault();
  }
  if (isDragged) {
    getXY(event);
    scratch(mouseX, mouseY);
  }
});

//stop drawing
canvas.addEventListener(events[deviceType].up, () => {
  isDragged = false;
});

//If mouse leaves the square
canvas.addEventListener("mouseleave", () => {
  isDragged = false;
});

const scratch = (x, y) => {
  //destination-out draws new shapes behind the existing canvas content
  context.globalCompositeOperation = "destination-out";
  context.beginPath();
  //arc makes circle - x,y,radius,start angle,end angle
  context.arc(x, y, 12, 0, 2 * Math.PI);
  context.fill();
};

window.onload = init();
    </script>